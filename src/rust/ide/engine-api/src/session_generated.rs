// automatically generated by the FlatBuffers compiler, do not modify



use crate::util_generated::*;
use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod org {

  use crate::util_generated::*;
  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;
#[allow(unused_imports, dead_code)]
pub mod enso {

  use crate::util_generated::*;
  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;
#[allow(unused_imports, dead_code)]
pub mod languageserver {

  use crate::util_generated::*;
  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;
#[allow(unused_imports, dead_code)]
pub mod protocol {

  use crate::util_generated::*;
  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;
#[allow(unused_imports, dead_code)]
pub mod data {

  use crate::util_generated::*;
  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;
#[allow(unused_imports, dead_code)]
pub mod session {

  use crate::util_generated::*;
  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

pub enum SessionInitOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct SessionInit<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SessionInit<'a> {
    type Inner = SessionInit<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> SessionInit<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        SessionInit {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args SessionInitArgs<'args>) -> flatbuffers::WIPOffset<SessionInit<'bldr>> {
      let mut builder = SessionInitBuilder::new(_fbb);
      if let Some(x) = args.identifier { builder.add_identifier(x); }
      builder.finish()
    }

    pub const VT_IDENTIFIER: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn identifier(&self) -> &'a super::util::EnsoUUID {
    self._tab.get::<super::util::EnsoUUID>(SessionInit::VT_IDENTIFIER, None).unwrap()
  }
}

pub struct SessionInitArgs<'a> {
    pub identifier: Option<&'a  super::util::EnsoUUID>,
}
impl<'a> Default for SessionInitArgs<'a> {
    #[inline]
    fn default() -> Self {
        SessionInitArgs {
            identifier: None, // required field
        }
    }
}
pub struct SessionInitBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SessionInitBuilder<'a, 'b> {
  #[inline]
  pub fn add_identifier(&mut self, identifier: &'b  super::util::EnsoUUID) {
    self.fbb_.push_slot_always::<&super::util::EnsoUUID>(SessionInit::VT_IDENTIFIER, identifier);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SessionInitBuilder<'a, 'b> {
    let start = _fbb.start_table();
    SessionInitBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SessionInit<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, SessionInit::VT_IDENTIFIER,"identifier");
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum SessionInitResponseOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct SessionInitResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SessionInitResponse<'a> {
    type Inner = SessionInitResponse<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> SessionInitResponse<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        SessionInitResponse {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        _args: &'args SessionInitResponseArgs) -> flatbuffers::WIPOffset<SessionInitResponse<'bldr>> {
      let mut builder = SessionInitResponseBuilder::new(_fbb);
      builder.finish()
    }

}

pub struct SessionInitResponseArgs {
}
impl<'a> Default for SessionInitResponseArgs {
    #[inline]
    fn default() -> Self {
        SessionInitResponseArgs {
        }
    }
}
pub struct SessionInitResponseBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SessionInitResponseBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SessionInitResponseBuilder<'a, 'b> {
    let start = _fbb.start_table();
    SessionInitResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SessionInitResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_session_init_response<'a>(buf: &'a [u8]) -> SessionInitResponse<'a> {
  flatbuffers::get_root::<SessionInitResponse<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_session_init_response<'a>(buf: &'a [u8]) -> SessionInitResponse<'a> {
  flatbuffers::get_size_prefixed_root::<SessionInitResponse<'a>>(buf)
}

#[inline]
pub fn finish_session_init_response_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<SessionInitResponse<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_session_init_response_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<SessionInitResponse<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod session
}  // pub mod data
}  // pub mod protocol
}  // pub mod languageserver
}  // pub mod enso
}  // pub mod org

