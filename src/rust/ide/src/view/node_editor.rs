//! View of the node editor.
// TODO[ao] this module should be completely reworked when doing the
//  https://github.com/enso-org/ide/issues/597
//  There should be a wrapper for each view which "fences" the input : emitting events in this
//  wrapper should not notify the outputs.

use crate::prelude::*;

use crate::controller::graph::NodeTrees;
use crate::model::execution_context::ComputedValueInfo;
use crate::model::execution_context::LocalCall;
use crate::model::execution_context::ExpressionId;
use crate::model::execution_context::Visualization;
use crate::model::execution_context::VisualizationId;
use crate::model::execution_context::VisualizationUpdateData;

use bimap::BiMap;
use enso_frp as frp;
use enso_frp::stream::EventEmitter;
use ensogl::display;
use ensogl::display::traits::*;
use ensogl::application::Application;
use ensogl_gui_list_view as list_view;
use ide_view::graph_editor;
use ide_view::graph_editor::component::visualization;
use ide_view::graph_editor::EdgeTarget;
use ide_view::graph_editor::GraphEditor;
use ide_view::graph_editor::SharedHashMap;
use utils::channel::process_stream_with_handle;
use crate::controller::searcher::suggestion::MatchInfo;
use crate::controller::searcher::Suggestions;


// ==============
// === Errors ===
// ==============

/// Error returned by various function inside GraphIntegration, when our mappings from controller
/// items (node or connections) to displayed items are missing some information.
#[derive(Copy,Clone,Debug,Fail)]
enum MissingMappingFor {
    #[fail(display="Displayed node {:?} is not bound to any controller node.",_0)]
    DisplayedNode(graph_editor::NodeId),
    #[fail(display="Controller node {:?} is not bound to any displayed node",_0)]
    ControllerNode(ast::Id),
    #[fail(display="Displayed connection {:?} is not bound to any controller connection", _0)]
    DisplayedConnection(graph_editor::EdgeId),
}

/// Error raised when reached some fatal inconsistency in data provided by GraphEditor.
#[derive(Copy,Clone,Debug,Fail)]
#[fail(display="Discrepancy in a GraphEditor component")]
struct GraphEditorInconsistency;

#[derive(Copy,Clone,Debug,Fail)]
#[fail(display="No visualization associated with view node {} found.", _0)]
struct NoSuchVisualization(graph_editor::NodeId);

#[derive(Copy,Clone,Debug,Fail)]
#[fail(display="Graph node {} already has visualization attached.", _0)]
struct VisualizationAlreadyAttached(graph_editor::NodeId);

#[derive(Copy,Clone,Debug,Fail)]
#[fail(display="The Graph Integration hsd no SearcherController.")]
struct MissingSearcherController;


// ====================
// === FencedAction ===
// ====================

/// An utility to FRP network. It is wrapped closure in a set of FRP nodes. The closure is called
/// on `trigger`, and `is_running` contains information if we are still inside closure call. It
/// allows us to block some execution path to avoid infinite loops.
///
/// ### Example
///
/// Here we want to do some updates when node was added to graph, but not during set up.
/// ```rust,compile_fail
/// frp::new_network! { network
///     let set_up = FencedAction::fence(&network, |()| {
///         frp.add_node.emit(());
///         // other things.
///     });
///     def _update = frp.node_added.map2(&set_up.is_running, |id,is_set_up| {
///         if !is_set_up {
///             update_something(id)
///         }
///     });
/// }
/// // This will run the set up closure, but without calling update_something.
/// set_up.trigger.emit(());
/// ```
#[derive(CloneRef)]
struct FencedAction<Parameter:frp::Data> {
    trigger    : frp::Source<Parameter>,
    is_running : frp::Stream<bool>,
}

impl<Parameter:frp::Data> FencedAction<Parameter> {
    /// Wrap the `action` in `FencedAction`.
    fn fence(network:&frp::Network, action:impl Fn(&Parameter) + 'static) -> Self {
        frp::extend! { network
            trigger    <- source::<Parameter>();
            triggered  <- trigger.constant(());
            switch     <- any(...);
            switch     <+ triggered;
            performed  <- trigger.map(move |param| action(param));
            switch     <+ performed;
            is_running <- switch.toggle();
        }
        Self {trigger,is_running}
    }
}



// ==============================
// === GraphEditorIntegration ===
// ==============================

/// The identifier base that will be used to name the methods introduced by "collapse nodes"
/// refactoring. Names are typically generated by taking base and appending subsequent integers,
/// until the generated name does not collide with any known identifier.
const COLLAPSED_FUNCTION_NAME:&str = "func";

/// The gap between nodes in pixels on default node layout (when user did not set any position of
/// node - possibly when node was added by editing text).
const DEFAULT_GAP_BETWEEN_NODES : f32 = 40.0;
/// The default X position of the node when user did not set any position of node - possibly when
/// node was added by editing text.
const DEFAULT_NODE_X_POSITION   : f32 = -100.0;
/// The default Y position of the node when user did not set any position of node - possibly when
/// node was added by editing text.
const DEFAULT_NODE_Y_POSITION   : f32 =  200.0;

/// A structure which handles integration between controller and graph_editor EnsoGl control.
/// All changes made by user in view are reflected in controller, and all controller notifications
/// update view accordingly.
//TODO[ao] soon we should rearrange modules and crates to avoid such long names.
#[allow(missing_docs)]
#[derive(Clone,CloneRef,Debug)]
pub struct GraphEditorIntegratedWithController {
    model   : Rc<GraphEditorIntegratedWithControllerModel>,
    network : frp::Network,
}

impl GraphEditorIntegratedWithController {
    /// Get GraphEditor.
    pub fn graph_editor(&self) -> GraphEditor {
        self.model.view.graph().clone_ref()
    }

    /// Get the controller associated with this graph editor.
    pub fn controller(&self) -> &controller::ExecutedGraph {
        &self.model.controller
    }
}

#[derive(Debug)]
struct GraphEditorIntegratedWithControllerModel {
    logger              : Logger,
    //TODO[ao] we display the new "Project view" because it contains documentation panel, but no
    // text editor. This should be refactored as a part of task
    // https://github.com/enso-org/ide/issues/597
    view                : ide_view::project::View,
    controller          : controller::ExecutedGraph,
    project             : model::Project,
    searcher_controller : RefCell<Option<controller::Searcher>>,
    node_views          : RefCell<BiMap<ast::Id,graph_editor::NodeId>>,
    expression_views    : RefCell<HashMap<graph_editor::NodeId,String>>,
    connection_views    : RefCell<BiMap<controller::graph::Connection,graph_editor::EdgeId>>,
    visualizations      : SharedHashMap<graph_editor::NodeId,VisualizationId>,
}


// === Construction And Setup ===

impl GraphEditorIntegratedWithController {
    /// Constructor. It creates GraphEditor and integrates it with given controller handle.
    pub fn new
    ( logger     : Logger
    , app        : &Application
    , controller : controller::ExecutedGraph
    , project    : model::Project) -> Self {
        let model = GraphEditorIntegratedWithControllerModel::new(logger,app,controller,project);
        let model        = Rc::new(model);
        let editor_outs  = &model.view.graph().frp.outputs;
        let searcher_frp = &model.view.searcher().frp;
        let project_frp  = &model.view.frp;
        frp::new_network! {network
            let invalidate = FencedAction::fence(&network,f!([model](()) {
                let result = model.refresh_graph_view();
                if let Err(err) = result {
                    error!(model.logger,"Error while invalidating graph: {err}");
                }
            }));
        }


        // === Breadcrumb Selection ===

        let breadcrumbs = &model.view.graph().breadcrumbs;
        frp::extend! {network
            eval_ breadcrumbs.frp.outputs.breadcrumb_pop(model.node_exited_in_ui(&()).ok());
            eval  breadcrumbs.frp.outputs.breadcrumb_push((local_call) {
                model.expression_entered_in_ui(&local_call.as_ref().map(|local_call| {
                    let definition = (**local_call.definition).clone();
                    let call       = local_call.call;
                    LocalCall{definition,call}
                })).ok()
            });
        }


        // === Project Renaming ===

        let breadcrumbs = &model.view.graph().breadcrumbs;
        frp::extend! {network
            eval breadcrumbs.frp.outputs.project_name((name) {
                model.rename_project(name);
            });
        }


        // === UI Actions ===

        let node_removed = Self::ui_action(&model,
            GraphEditorIntegratedWithControllerModel::node_removed_in_ui,&invalidate.trigger);
        let nodes_collapsed = Self::ui_action(&model,
            GraphEditorIntegratedWithControllerModel::nodes_collapsed_in_ui,&invalidate.trigger);
        let node_entered = Self::ui_action(&model,
            GraphEditorIntegratedWithControllerModel::node_entered_in_ui,&invalidate.trigger);
        let node_exited = Self::ui_action(&model,
            GraphEditorIntegratedWithControllerModel::node_exited_in_ui,&invalidate.trigger);
        let connection_created = Self::ui_action(&model,
            GraphEditorIntegratedWithControllerModel::connection_created_in_ui,&invalidate.trigger);
        let connection_removed = Self::ui_action(&model,
            GraphEditorIntegratedWithControllerModel::connection_removed_in_ui,&invalidate.trigger);
        let node_moved = Self::ui_action(&model,
            GraphEditorIntegratedWithControllerModel::node_moved_in_ui,&invalidate.trigger);
        let node_editing = Self::ui_action(&model,
            GraphEditorIntegratedWithControllerModel::node_editing_in_ui(Rc::downgrade(&model)),
            &invalidate.trigger);
        let node_expression_set = Self::ui_action(&model,
            GraphEditorIntegratedWithControllerModel::node_expression_set_in_ui,&invalidate.trigger);
        let suggestion_picked = Self::ui_action(&model,
            GraphEditorIntegratedWithControllerModel::suggestion_picked_in_ui, &invalidate.trigger);
        let node_editing_committed = Self::ui_action(&model,
            GraphEditorIntegratedWithControllerModel::node_editing_committed_in_ui,
            &invalidate.trigger);
        let visualization_enabled = Self::ui_action(&model,
            GraphEditorIntegratedWithControllerModel::visualization_enabled_in_ui,
            &invalidate.trigger);
        let visualization_disabled = Self::ui_action(&model,
            GraphEditorIntegratedWithControllerModel::visualization_disabled_in_ui,
            &invalidate.trigger);
        frp::extend! {network
            // Notifications from controller
            let handle_notification = FencedAction::fence(&network,
                f!((notification:&Option<controller::graph::executed::Notification>)
                    model.handle_controller_notification(notification);
            ));

            // Changes in Graph Editor
            let is_handling_notification = handle_notification.is_running;
            is_hold <- is_handling_notification.all_with(&invalidate.is_running, |l,r| *l || *r);
            _action <- editor_outs.node_removed             .map2(&is_hold,node_removed);
            _action <- editor_outs.nodes_collapsed          .map2(&is_hold,nodes_collapsed);
            _action <- editor_outs.node_entered             .map2(&is_hold,node_entered);
            _action <- editor_outs.node_exited              .map2(&is_hold,node_exited);
            _action <- editor_outs.connection_added         .map2(&is_hold,connection_created);
            _action <- editor_outs.visualization_enabled    .map2(&is_hold,visualization_enabled);
            _action <- editor_outs.visualization_disabled   .map2(&is_hold,visualization_disabled);
            _action <- editor_outs.connection_removed       .map2(&is_hold,connection_removed);
            _action <- editor_outs.node_position_set_batched.map2(&is_hold,node_moved);
            _action <- editor_outs.edited_node              .map2(&is_hold,node_editing);
            _action <- editor_outs.node_expression_set      .map2(&is_hold,node_expression_set);
            _action <- searcher_frp.picked_entry            .map2(&is_hold,suggestion_picked);
            _action <- project_frp.editing_committed        .map2(&is_hold,node_editing_committed);

            eval project_frp.editing_committed ((_) invalidate.trigger.emit(()));
            eval project_frp.editing_aborted   ((_) invalidate.trigger.emit(()));
        }
        Self::connect_frp_to_controller_notifications(&model,handle_notification.trigger);
        Self {model,network}
    }

    fn connect_frp_to_controller_notifications
    ( model        : &Rc<GraphEditorIntegratedWithControllerModel>
    , frp_endpoint : frp::Source<Option<controller::graph::executed::Notification>>
    ) {
        let stream  = model.controller.subscribe();
        let weak    = Rc::downgrade(model);
        let logger  = model.logger.clone_ref();
        let handler = process_stream_with_handle(stream,weak,move |notification,_model| {
            info!(logger,"Processing notification {notification:?}");
            frp_endpoint.emit_event(&Some(notification));
            futures::future::ready(())
        });
        executor::global::spawn(handler);
    }

    /// Convert a function being a method of GraphEditorIntegratedWithControllerModel to a closure
    /// suitable for connecting to GraphEditor frp network. Returned lambda takes `Parameter` and a
    /// bool, which indicates if this action is currently on hold (e.g. due to performing
    /// invalidation).
    fn ui_action<Action,Parameter>
    ( model      : &Rc<GraphEditorIntegratedWithControllerModel>
    , action     : Action
    , invalidate : &frp::Source<()>
    ) -> impl Fn(&Parameter,&bool)
    where Action : Fn(&GraphEditorIntegratedWithControllerModel,&Parameter)
            -> FallibleResult<()> + 'static {
        f!([model,invalidate] (parameter,is_hold) {
            if !*is_hold {
                let result = action(&*model,parameter);
                if let Err(err) = result {
                    error!(model.logger,"Error while performing UI action on controllers: {err}");
                    info!(model.logger,"Invalidating displayed graph");
                    invalidate.emit(());
                }
            }
        })
    }
}

impl GraphEditorIntegratedWithControllerModel {
    fn new
    ( logger     : Logger
    , app        : &Application
    , controller : controller::ExecutedGraph
    , project    : model::Project) -> Self {
        let view                = app.new_view::<ide_view::project::View>();
        let node_views          = default();
        let connection_views    = default();
        let expression_views    = default();
        let visualizations      = default();
        let searcher_controller = default();
        let this = GraphEditorIntegratedWithControllerModel {
            view,controller,node_views,
            expression_views,connection_views,logger,visualizations,project,searcher_controller
        };

        if let Err(err) = this.refresh_graph_view() {
            error!(this.logger,"Error while initializing graph editor: {err}.");
        }
        this
    }
}


// === Project renaming ===

impl GraphEditorIntegratedWithControllerModel {
    fn rename_project(&self, name:impl Str) {
        if self.project.name() != name.as_ref() {
            let project     = self.project.clone_ref();
            let breadcrumbs = self.view.graph().breadcrumbs.clone_ref();
            let logger      = self.logger.clone_ref();
            let name        = name.into();
            executor::global::spawn(async move {
                if let Err(e) = project.rename_project(name).await {
                    info!(logger, "The project couldn't be renamed: {e}");
                    breadcrumbs.frp.cancel_project_name_editing.emit(());
                }
            });
        }
    }
}


// === Updating Graph View ===

impl GraphEditorIntegratedWithControllerModel {
    /// Reload whole displayed content to be up to date with module state.
    pub fn refresh_graph_view(&self) -> FallibleResult<()> {
        info!(self.logger, "Refreshing the graph view.");
        use controller::graph::Connections;
        let Connections{trees,connections} = self.controller.connections()?;
        self.refresh_node_views(trees)?;
        self.refresh_connection_views(connections)?;
        Ok(())
    }

    fn refresh_node_views
    (&self, mut trees:HashMap<double_representation::node::Id,NodeTrees>) -> FallibleResult<()> {
        let nodes = self.controller.graph().nodes()?;
        let ids   = nodes.iter().map(|node| node.info.id() ).collect();
        self.retain_node_views(&ids);
        for (i,node_info) in nodes.iter().enumerate() {
            let id          = node_info.info.id();
            let node_trees  = trees.remove(&id).unwrap_or_else(default);
            let x           = DEFAULT_NODE_X_POSITION;
            let y           = DEFAULT_NODE_Y_POSITION + i as f32 * -DEFAULT_GAP_BETWEEN_NODES;
            let default_pos = Vector2(x,y);
            let displayed   = self.node_views.borrow_mut().get_by_left(&id).cloned();
            match displayed {
                Some(displayed) => self.refresh_node_view(displayed, node_info, node_trees),
                None            => self.create_node_view(node_info,node_trees,default_pos),
            }
        }
        Ok(())
    }

    /// Retain only given nodes in displayed graph.
    fn retain_node_views(&self, ids:&HashSet<ast::Id>) {
        let to_remove = {
            let borrowed = self.node_views.borrow();
            let filtered = borrowed.iter().filter(|(id,_)| !ids.contains(id));
            filtered.map(|(k,v)| (*k,*v)).collect_vec()
        };
        for (id,displayed_id) in to_remove {
            self.view.graph().frp.inputs.remove_node.emit_event(&displayed_id);
            self.node_views.borrow_mut().remove_by_left(&id);
        }
    }

    fn create_node_view
    (&self, info:&controller::graph::Node, trees:NodeTrees, default_pos:Vector2) {
        let id           = info.info.id();
        let displayed_id = self.view.graph().add_node();
        self.refresh_node_view(displayed_id, info, trees);
        // If position wasn't present in metadata, we must initialize it.
        if info.metadata.as_ref().and_then(|md| md.position).is_none() {
            self.view.graph().frp.inputs.set_node_position.emit_event(&(displayed_id, default_pos));
        }
        self.node_views.borrow_mut().insert(id, displayed_id);
    }

    /// Return an asynchronous event processor that routes visualization update to the given's
    /// visualization respective FRP endpoint.
    fn visualization_update_handler
    ( &self
    , endpoint : frp::Source<(graph_editor::NodeId,visualization::Data)>
    , node_id  : graph_editor::NodeId
    ) -> impl FnMut(VisualizationUpdateData) -> futures::future::Ready<()> {
        // TODO [mwu]
        //  For now only JSON visualizations are supported, so we can just assume JSON data in the
        //  binary package.
        let logger = self.logger.clone_ref();
        move |update| {
            match Self::deserialize_visualization_data(update) {
                Ok (data)  => endpoint.emit((node_id,data)),
                Err(error) =>
                    // TODO [mwu]
                    //  We should consider having the visualization also accept error input.
                    error!(logger, "Failed to deserialize visualization update. {error}"),
            }
            futures::future::ready(())
        }
    }

    fn deserialize_visualization_data
    (data:VisualizationUpdateData) -> FallibleResult<visualization::Data> {
        let binary  = data.as_ref();
        let as_text = std::str::from_utf8(binary)?;
        let as_json : serde_json::Value = serde_json::from_str(as_text)?;
        Ok(visualization::Data::from(as_json))
    }

    fn refresh_node_view
    (&self, id:graph_editor::NodeId, node:&controller::graph::Node, trees:NodeTrees) {
        let position = node.metadata.as_ref().and_then(|md| md.position);
        if let Some(position) = position {
            self.view.graph().frp.inputs.set_node_position.emit_event(&(id, position.vector));
        }
        let expression = node.info.expression().repr();

        // TODO [MWU]
        //  Currently we cannot limit updates, as each invalidation can affect span tree generation
        //  context and as such may require updating span trees. So no matter whether expression
        //  changed or not, we shall emit the updates.
        //  This should be addressed as part of https://github.com/enso-org/ide/issues/787
        let code_and_trees = graph_editor::component::node::port::Expression {
            code             : expression.clone(),
            input_span_tree  : trees.inputs,
            output_span_tree : trees.outputs.unwrap_or_else(default)
        };
        self.view.graph().frp.inputs.set_node_expression.emit_event(&(id, code_and_trees));
        self.expression_views.borrow_mut().insert(id, expression);

        // Set initially available type information on ports (identifiable expression's sub-parts).
        for expression_part in node.info.expression().iter_recursive() {
            if let Some(id) = expression_part.id {
                self.refresh_computed_info(id);
            }
        }
    }

    /// Like `refresh_computed_info` but for multiple expressions.
    fn refresh_computed_infos(&self, expressions_to_refresh:&[ExpressionId]) -> FallibleResult<()> {
        debug!(self.logger, "Refreshing type information for IDs: {expressions_to_refresh:?}.");
        for id in expressions_to_refresh {
            self.refresh_computed_info(*id)
        }
        Ok(())
    }

    /// Look up the computed information for a given expression and pass the information to the
    /// graph editor view.
    ///
    /// The computed value information includes the expression type and the target method pointer.
    fn refresh_computed_info(&self, id:ExpressionId) {
        let info     = self.lookup_computed_info(&id);
        let info     = info.as_ref();
        let typename = info.and_then(|info| info.typename.clone().map(graph_editor::Type));
        if let Some(node_id) = self.node_views.borrow().get_by_left(&id).cloned() {
            self.set_type(node_id,id,typename);
            let method_pointer = info.and_then(|info| {
                info.method_call.and_then(|entry_id| {
                    let opt_method = self.project.suggestion_db().lookup_method_ptr(entry_id).ok();
                    opt_method.map(|method| graph_editor::MethodPointer(Rc::new(method)))
                })
            });
            self.set_method_pointer(id,method_pointer);
        } else {
            debug!(self.logger, "Failed to get `NodeId` for ID: {id:?}.");
        }
    }

    /// Set given type (or lack of such) on the given sub-expression.
    fn set_type(&self, node_id:graph_editor::NodeId, id:ExpressionId, typename:Option<graph_editor::Type>) {
        let event = (node_id,id,typename);
        self.view.graph().frp.inputs.set_expression_type.emit_event(&event);
    }

    /// Set given method pointer (or lack of such) on the given sub-expression.
    fn set_method_pointer(&self, id:ExpressionId, method:Option<graph_editor::MethodPointer>) {
        let event = (id,method);
        self.view.graph().frp.inputs.set_method_pointer.emit_event(&event);
    }

    fn refresh_connection_views
    (&self, connections:Vec<controller::graph::Connection>) -> FallibleResult<()> {
        self.retain_connection_views(&connections);
        for con in connections {
            if !self.connection_views.borrow().contains_left(&con) {
                let targets = self.edge_targets_from_controller_connection(con.clone())?;
                self.view.graph().frp.inputs.connect_nodes.emit_event(&targets);
                let edge_id = self.view.graph().frp.outputs.edge_added.value();
                self.connection_views.borrow_mut().insert(con, edge_id);
            }
        }
        Ok(())
    }

    fn edge_targets_from_controller_connection
    (&self, connection:controller::graph::Connection) -> FallibleResult<(EdgeTarget,EdgeTarget)> {
        let src_node = self.get_displayed_node_id(connection.source.node)?;
        let dst_node = self.get_displayed_node_id(connection.destination.node)?;
        let src      = EdgeTarget::new(src_node,connection.source.port);
        let data     = EdgeTarget::new(dst_node,connection.destination.port);
        Ok((src,data))
    }

    /// Retain only given connections in displayed graph.
    fn retain_connection_views(&self, connections:&[controller::graph::Connection]) {
        let to_remove = {
            let borrowed = self.connection_views.borrow();
            let filtered = borrowed.iter().filter(|(con,_)| !connections.contains(con));
            filtered.map(|(_,edge_id)| *edge_id).collect_vec()
        };
        for edge_id in to_remove {
            self.view.graph().frp.inputs.remove_edge.emit_event(&edge_id);
            self.connection_views.borrow_mut().remove_by_right(&edge_id);
        }
    }
}


// === Handling Controller Notifications ===

impl GraphEditorIntegratedWithControllerModel {
    /// Handle notification received from controller about the whole graph being invalidated.
    pub fn on_invalidated(&self) -> FallibleResult<()> {
        self.refresh_graph_view()
    }

    /// Handle notification received from controller about values having been entered.
    pub fn on_node_entered(&self, local_call:&LocalCall) -> FallibleResult<()> {
        let definition = local_call.definition.clone().into();
        let call       = local_call.call;
        let local_call = graph_editor::LocalCall{definition,call};
        self.view.graph().frp.deselect_all_nodes.emit_event(&());
        self.view.graph().breadcrumbs.frp.push_breadcrumb.emit(&Some(local_call));
        self.request_detaching_all_visualizations();
        self.refresh_graph_view()
    }

    /// Handle notification received from controller about node having been exited.
    pub fn on_node_exited(&self, id:double_representation::node::Id) -> FallibleResult<()> {
        self.view.graph().frp.deselect_all_nodes.emit_event(&());
        self.request_detaching_all_visualizations();
        self.refresh_graph_view()?;
        self.view.graph().breadcrumbs.frp.pop_breadcrumb.emit(());
        let id = self.get_displayed_node_id(id)?;
        self.view.graph().frp.select_node.emit_event(&id);
        Ok(())
    }

    /// Handle notification received from controller about values having been computed.
    pub fn on_values_computed(&self, expressions:&[ExpressionId]) -> FallibleResult<()> {
        self.refresh_computed_infos(&expressions)
    }

    /// Request controller to detach all attached visualizations.
    pub fn request_detaching_all_visualizations(&self) {
        let controller = self.controller.clone_ref();
        let logger     = self.logger.clone_ref();
        let action     = async move {
            for result in controller.detach_all_visualizations().await {
                if let Err(err) = result {
                    error!(logger,"Failed to detach one of the visualizations: {err:?}.");
                }
            }
        };
        executor::global::spawn(action);
    }

    /// Handle notification received from controller.
    pub fn handle_controller_notification
    (&self, notification:&Option<controller::graph::executed::Notification>) {
        use controller::graph::executed::Notification;
        use controller::graph::Notification::Invalidate;

        debug!(self.logger, "Received notification {notification:?}");
        let result = match notification {
            Some(Notification::Graph(Invalidate))         => self.on_invalidated(),
            Some(Notification::ComputedValueInfo(update)) => self.on_values_computed(update),
            Some(Notification::SteppedOutOfNode(id))      => self.on_node_exited(*id),
            Some(Notification::EnteredNode(local_call))   => self.on_node_entered(local_call),
            other => {
                warning!(self.logger,"Handling notification {other:?} is not implemented; \
                    performing full invalidation");
                self.refresh_graph_view()
            }
        };
        if let Err(err) = result {
            error!(self.logger,"Error while updating graph after receiving {notification:?} from \
                controller: {err}");
        }
    }

    pub fn handle_searcher_notification(&self, notification:controller::searcher::Notification) {
        use controller::searcher::Notification;
        use list_view::entry::AnyModelProvider;
        match notification {
            Notification::NewSuggestionList => with(self.searcher_controller.borrow(), |searcher| {
                if let Some(searcher) = &*searcher {
                    let new_entries:AnyModelProvider = match searcher.suggestions() {
                        Suggestions::Loading       => list_view::entry::EmptyProvider.into(),
                        Suggestions::Loaded {list} => SuggestionProvider{list}.into(),
                        Suggestions::Error(err)    => {
                            error!(self.logger, "Error while obtaining list from searcher: {err}");
                            list_view::entry::EmptyProvider.into()
                        },
                    };
                    self.view.searcher().set_entries(new_entries);
                }
            })
        }
    }
}


// === Passing UI Actions To Controllers ===

// These functions are called with FRP event values as arguments. The FRP values are always provided
// by reference, even those "trivially-copy" types, To keep code cleaner we take all parameters
// by reference as well.
#[allow(clippy::trivially_copy_pass_by_ref)]
impl GraphEditorIntegratedWithControllerModel {
    fn node_removed_in_ui(&self, node:&graph_editor::NodeId) -> FallibleResult<()> {
        let id = self.get_controller_node_id(*node)?;
        self.node_views.borrow_mut().remove_by_left(&id);
        self.controller.graph().remove_node(id)?;
        Ok(())
    }

    fn node_moved_in_ui
    (&self, (displayed_id,pos):&(graph_editor::NodeId,Vector2)) -> FallibleResult<()> {
        if let Ok(id) = self.get_controller_node_id(*displayed_id) {
            self.controller.graph().module.with_node_metadata(id, Box::new(|md| {
                md.position = Some(model::module::Position::new(pos.x,pos.y));
            }));
        }
        Ok(())
    }

    fn nodes_collapsed_in_ui
    (&self, (collapsed,_new_node_view_id):&(Vec<graph_editor::NodeId>,graph_editor::NodeId))
    -> FallibleResult<()> {
        let ids          = self.get_controller_node_ids(collapsed)?;
        let _new_node_id = self.controller.graph().collapse(ids,COLLAPSED_FUNCTION_NAME)?;
        // TODO [mwu] https://github.com/enso-org/ide/issues/760
        //   As part of this issue, storing relation between new node's controller and view ids will
        //   be necessary.
        Ok(())
    }

    fn node_expression_set_in_ui
    (&self, (displayed_id,expression):&(graph_editor::NodeId,String)) -> FallibleResult<()> {
        let searcher = self.searcher_controller.borrow();
        self.expression_views.borrow_mut().insert(*displayed_id,expression.clone());
        if let Some(searcher) = searcher.as_ref() {
            searcher.set_input(expression.clone())?;
        }
        Ok(())
    }

    fn node_editing_in_ui(weak_self:Weak<Self>)
    -> impl Fn(&Self,&Option<graph_editor::NodeId>) -> FallibleResult<()> {
        move |this,displayed_id| {
            if let Some(displayed_id) = displayed_id {
                let id   = this.get_controller_node_id(*displayed_id);
                let mode = match id {
                    Ok(node_id) => controller::searcher::Mode::EditNode {node_id},
                    Err(MissingMappingFor::DisplayedNode(id)) => {
                        let node_view = this.view.graph().model.nodes.get_cloned_ref(&id);
                        let position  = node_view.map(|node| node.position().xy());
                        let position  = position.map(|vector| model::module::Position{vector});
                        controller::searcher::Mode::NewNode {position}
                    },
                    Err(other) => return Err(other.into()),
                };
                let selected_nodes = this.view.graph().selected_nodes().iter().filter_map(|id| {
                    this.get_controller_node_id(*id).ok()
                }).collect_vec();
                let controller = this.controller.clone_ref();
                let searcher = controller::Searcher::new_from_graph_controller
                    (&this.logger,&this.project,controller,mode,selected_nodes)?;
                executor::global::spawn(searcher.subscribe().for_each(f!([weak_self](notification) {
                    if let Some(this) = weak_self.upgrade() {
                        this.handle_searcher_notification(notification);
                    }
                    futures::future::ready(())
                })));
                *this.searcher_controller.borrow_mut() = Some(searcher);
            } else {
                *this.searcher_controller.borrow_mut() = None;
            }
            Ok(())
        }
    }

    fn suggestion_picked_in_ui
    (&self, entry:&Option<ide_view::searcher::entry::Id>) -> FallibleResult<()> {
        if let Some(entry) = entry {
            let graph_frp      = &self.view.graph().frp;
            let error          = || MissingSearcherController;
            let searcher       = self.searcher_controller.borrow().clone().ok_or_else(error)?;
            let error          = || GraphEditorInconsistency;
            let edited_node    = graph_frp.outputs.edited_node.value().ok_or_else(error)?;
            let new_code       = searcher.pick_completion_by_index(*entry)?;
            let code_and_trees = graph_editor::component::node::port::Expression {
                code             : new_code,
                input_span_tree  : default(),
                output_span_tree : default(),
            };
            graph_frp.inputs.set_node_expression.emit_event(&(edited_node,code_and_trees));
        }
        Ok(())
    }

    fn node_editing_committed_in_ui
    (&self, displayed_id:&graph_editor::NodeId) -> FallibleResult<()> {
        let error = || MissingSearcherController;
        let searcher = self.searcher_controller.borrow().clone().ok_or_else(error)?;
        *self.searcher_controller.borrow_mut() = None;
        match searcher.commit_node() {
            Ok(node_id) => {
                self.node_views.borrow_mut().insert(node_id,*displayed_id);
                Ok(())
            }
            Err(err) => {
                self.view.graph().frp.remove_node.emit(displayed_id);
                Err(err)
            }
        }
    }

    fn connection_created_in_ui(&self, edge_id:&graph_editor::EdgeId) -> FallibleResult<()> {
        let displayed = self.view.graph().edges.get_cloned(&edge_id).ok_or(GraphEditorInconsistency)?;
        let con       = self.controller_connection_from_displayed(&displayed)?;
        let inserting = self.connection_views.borrow_mut().insert(con.clone(), *edge_id);
        if inserting.did_overwrite() {
            internal_warning!(self.logger,"Created connection {edge_id} overwrite some old \
                mappings in GraphEditorIntegration.")
        }
        self.controller.connect(&con)?;
        Ok(())
    }

    fn connection_removed_in_ui(&self, edge_id:&graph_editor::EdgeId) -> FallibleResult<()> {
        let connection = self.get_controller_connection(*edge_id)?;
        self.connection_views.borrow_mut().remove_by_left(&connection);
        self.controller.disconnect(&connection)?;
        Ok(())
    }

    /// Create a controller-compatible description of the visualization based on the input received
    /// from the graph editor endpoints.
    fn prepare_visualization
    (&self, node_id:&graph_editor::NodeId) -> FallibleResult<Visualization> {
        use crate::model::module::QualifiedName;

        // TODO [mwu]
        //   Currently it is not possible to:
        //    * enter other module than the initial (namely, "Main")
        //    * describe that visualization's expression wishes to be evaluated in any other
        //      context.
        //   Because of that for now we will just hardcode the `visualization_module` using
        //   fixed defaults. In future this will be changed, then the editor will also get access
        //   to the customised values.
        let project_name:String  = self.project.name().into();
        let module_name          = crate::view::project::INITIAL_MODULE_NAME;
        let visualisation_module = QualifiedName::from_segments(project_name,&[module_name])?;
        let id                   = VisualizationId::new_v4();
        let expression           = crate::constants::SERIALIZE_TO_JSON_EXPRESSION.into();
        let ast_id               = self.get_controller_node_id(*node_id)?;
        Ok(Visualization{ast_id,expression,id,visualisation_module})
    }

    fn visualization_enabled_in_ui(&self, node_id:&graph_editor::NodeId) -> FallibleResult<()> {
        // Do nothing if there is already a visualization attached.
        let err = || VisualizationAlreadyAttached(*node_id);
        self.get_controller_visualization_id(*node_id).is_err().ok_or_else(err)?;

        debug!(self.logger, "Attaching visualization on {node_id}.");
        let visualization  = self.prepare_visualization(node_id)?;
        let id             = visualization.id;
        let node_id        = *node_id;
        let controller     = self.controller.clone();
        let endpoint       = self.view.graph().frp.inputs.set_visualization_data.clone_ref();
        let update_handler = self.visualization_update_handler(endpoint,node_id);
        let logger         = self.logger.clone_ref();
        let visualizations = self.visualizations.clone_ref();

        // We cannot do this in the async block, as the user may decide to detach before server
        // confirms that we actually have attached.
        visualizations.insert(node_id.clone(),id);

        let attach_action  = async move {
            if let Ok(stream) = controller.attach_visualization(visualization).await {
                debug!(logger, "Successfully attached visualization {id} for node {node_id}.");
                let updates_handler = stream.for_each(update_handler);
                executor::global::spawn(updates_handler);
            } else {
                visualizations.remove(&node_id);
            }
        };
        executor::global::spawn(attach_action);
        Ok(())
    }

    fn visualization_disabled_in_ui(&self, node_id:&graph_editor::NodeId) -> FallibleResult<()> {
        debug!(self.logger,"Node editor wants to detach visualization on {node_id}.");
        let id             = self.get_controller_visualization_id(*node_id)?;
        let graph          = self.controller.clone();
        let logger         = self.logger.clone_ref();
        let visualizations = self.visualizations.clone_ref();
        let node_id        = *node_id;

        // We first detach to allow re-attaching even before server confirms the operation.
        visualizations.remove(&node_id);

        let detach_action = async move {
            if graph.detach_visualization(id).await.is_ok() {
                debug!(logger,"Successfully detached visualization {id} from node {node_id}.");
            } else {
                error!(logger,"Failed to detach visualization {id} from node {node_id}.");
                // TODO [mwu]
                //   We should somehow deal with this but we have really no information, how to.
                //   If this failed because e.g. the visualization was already removed (or another
                //   reason to that effect), we should just do nothing.
                //   But if it is issue like connectivity problem, then we should retry.
                //   But even if had better error recognition, we won't always know.
                //   So we should also handle errors like unexpected visualization updates and use
                //   them to drive cleanups on such discrepancies.
            }
        };

        crate::executor::global::spawn(detach_action);
        Ok(())
    }

    fn expression_entered_in_ui
    (&self, local_call:&Option<LocalCall>) -> FallibleResult<()> {
        if let Some(local_call) = local_call {
            let local_call   = local_call.clone();
            let controller   = self.controller.clone_ref();
            let logger       = self.logger.clone_ref();
            let enter_action = async move {
                info!(logger,"Entering node.");
                if let Err(e) = controller.enter_method_pointer(&local_call).await {
                    error!(logger,"Entering node failed: {e}.");
                }
            };
            executor::global::spawn(enter_action);
        }
        Ok(())
    }

    fn node_entered_in_ui(&self, node_id:&graph_editor::NodeId) -> FallibleResult<()> {
        debug!(self.logger,"Requesting entering the node {node_id}.");
        let call           = self.get_controller_node_id(*node_id)?;
        let method_pointer = self.controller.node_method_pointer(call)?;
        let definition     = (*method_pointer).clone();
        let local_call     = LocalCall{call,definition};
        self.expression_entered_in_ui(&Some(local_call))
    }

    fn node_exited_in_ui(&self, _:&()) -> FallibleResult<()> {
        debug!(self.logger,"Requesting exiting the current node.");
        let controller = self.controller.clone_ref();
        let logger     = self.logger.clone_ref();
        let exit_node_action = async move {
            info!(logger,"Exiting node.");
            if let Err(e) = controller.exit_node().await {
                debug!(logger, "Exiting node failed: {e}.");
            }
        };
        executor::global::spawn(exit_node_action);
        Ok(())
    }
}


// === Utilities ===

impl GraphEditorIntegratedWithControllerModel {
    fn get_controller_node_id
    (&self, displayed_id:graph_editor::NodeId) -> Result<ast::Id, MissingMappingFor> {
        let err = MissingMappingFor::DisplayedNode(displayed_id);
        self.node_views.borrow().get_by_right(&displayed_id).cloned().ok_or(err)
    }

    fn get_controller_node_ids
    (&self, displayed_ids:impl IntoIterator<Item:std::borrow::Borrow<graph_editor::NodeId>>)
    -> Result<Vec<ast::Id>, MissingMappingFor> {
        use std::borrow::Borrow;
        Result::from_iter(displayed_ids.into_iter().map(|id| {
            let id = id.borrow();
            self.get_controller_node_id(*id)
        }))
    }

    fn get_displayed_node_id
    (&self, node_id:ast::Id) -> Result<graph_editor::NodeId, MissingMappingFor> {
        let err = MissingMappingFor::ControllerNode(node_id);
        self.node_views.borrow().get_by_left(&node_id).cloned().ok_or(err)
    }

    fn get_controller_connection
    (&self, displayed_id:graph_editor::EdgeId)
    -> Result<controller::graph::Connection, MissingMappingFor> {
        let err = MissingMappingFor::DisplayedConnection(displayed_id);
        self.connection_views.borrow().get_by_right(&displayed_id).cloned().ok_or(err)
    }

    fn controller_connection_from_displayed
    (&self, connection:&graph_editor::Edge) -> FallibleResult<controller::graph::Connection> {
        let src      = connection.source().ok_or(GraphEditorInconsistency {})?;
        let dst      = connection.target().ok_or(GraphEditorInconsistency {})?;
        let src_node = self.get_controller_node_id(src.node_id)?;
        let dst_node = self.get_controller_node_id(dst.node_id)?;
        Ok(controller::graph::Connection {
            source      : controller::graph::Endpoint::new(src_node,src.port.deref().clone()),
            destination : controller::graph::Endpoint::new(dst_node,dst.port.deref().clone()),
        })
    }

    fn get_controller_visualization_id
    (&self, node_id:graph_editor::NodeId) -> Result<VisualizationId,NoSuchVisualization> {
        let err = || NoSuchVisualization(node_id);
        self.visualizations.get_copied(&node_id).ok_or_else(err)
    }

    fn lookup_computed_info(&self, id:&ExpressionId) -> Option<Rc<ComputedValueInfo>> {
        let registry = self.controller.computed_value_info_registry();
        registry.get(id)
    }
}



// ==================
// === NodeEditor ===
// ==================

/// Node Editor Panel integrated with Graph Controller.
#[derive(Clone,CloneRef,Debug)]
pub struct NodeEditor {
    logger         : Logger,
    display_object : display::object::Instance,
    #[allow(missing_docs)]
    pub graph     : Rc<GraphEditorIntegratedWithController>,
    visualization : controller::Visualization
}

impl NodeEditor {
    /// Create Node Editor Panel.
    pub async fn new
    ( logger        : impl AnyLogger
    , app           : &Application
    , controller    : controller::ExecutedGraph
    , project       : model::Project
    , visualization : controller::Visualization) -> FallibleResult<Self> {
        let logger         = Logger::sub(logger,"NodeEditor");
        let display_object = display::object::Instance::new(&logger);
        let graph          = GraphEditorIntegratedWithController::new(logger.clone_ref(),app,
            controller,project);
        let graph = Rc::new(graph);
        display_object.add_child(&graph.model.view);
        info!(logger, "Created.");
        Ok(NodeEditor {logger,display_object,graph,visualization}.init().await?)
    }

    async fn init(self) -> FallibleResult<Self> {
        let graph_editor = self.graph.graph_editor();
        let identifiers  = self.visualization.list_visualizations().await;
        let identifiers  = identifiers.unwrap_or_default();
        let project_name = self.graph.model.project.name().to_string();
        graph_editor.breadcrumbs.frp.project_name.emit(project_name);
        for identifier in identifiers {
            let visualization = self.visualization.load_visualization(&identifier).await;
            let visualization = visualization.map(|visualization| {
                graph_editor.frp.register_visualization.emit(Some(visualization));
            });
            visualization?;
        }
        info!(self.logger, "Initialized.");
        Ok(self)
    }

    /// Get ids of the nodes selected in the editor.
    ///
    /// They shall be ordered by the order of the selecting. Node selected as first shall be at
    /// the beginning.
    pub fn selected_nodes(&self) -> FallibleResult<Vec<ast::Id>> {
        let node_view_ids = self.graph.model.view.graph().selected_nodes().into_iter();
        let node_ids      = node_view_ids.map(|id| self.graph.model.get_controller_node_id(id));
        let node_ids : Result<Vec<_>,_> = node_ids.collect();
        node_ids.map_err(Into::into)
    }
}

impl display::Object for NodeEditor {
    fn display_object(&self) -> &display::object::Instance {
        &self.display_object
    }
}

#[derive(Clone,CloneRef,Debug)]
struct SuggestionProvider {
    list : Rc<controller::searcher::suggestion::List>,
}

impl list_view::entry::ModelProvider for SuggestionProvider {
    fn entry_count(&self) -> usize {
        self.list.matching_count()
    }

    fn get(&self, id: usize) -> Option<list_view::entry::Model> {
        let suggestion = self.list.get_cloned(id)?;
        if let MatchInfo::Matches {subsequence} = suggestion.match_info {
            let caption          = suggestion.suggestion.caption();
            let model            = list_view::entry::Model::new(caption.clone());
            let mut char_iter    = caption.char_indices().enumerate();
            let highlighted_iter = subsequence.indices.iter().filter_map(|idx| loop {
                if let Some(char) = char_iter.next() {
                    let (char_idx,(byte_id,char)) = char;
                    if char_idx == *idx {
                        let start = ensogl_text::Bytes(byte_id as i32);
                        let end   = ensogl_text::Bytes((byte_id + char.len_utf8()) as i32);
                        break Some(ensogl_text::Range::new(start,end))
                    }
                } else {
                    break None;
                }
            });
            let model = model.highlight(highlighted_iter);
            Some(model)
        } else {
            None
        }
    }
}
