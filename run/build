#!/usr/bin/env node

let fss = require('fs')
let fs  = require('fs').promises
let cmd = require('./lib/cmd')
let ncp = require('ncp').ncp

let argv = require('minimist')(process.argv.slice(2))
let child_argv = argv._


async function patch_file(path,patcher) {
    console.log(`Patching ${path}`)
    let code_to_patch = await fs.readFile(path,'utf8')
    let patched_code  = patcher(code_to_patch)
    await fs.writeFile(path,patched_code)
}

async function copy(src,tgt) {
    return new Promise((resolve, reject) => {
        ncp(src,tgt,(err) => {
            if (err) { reject(`${err}`) }
            resolve()
        })
    })
}


function section(title) {
    let border = '-'.repeat(8 + title.length)
    let middle = '--- ' + title + ' ---'
    console.log()
    console.log()
    console.log(border)
    console.log(middle)
    console.log(border)
    console.log()
}



// ============
// === Init ===
// ============

async function init () {
    let initialized = fss.existsSync('.initialized')
    if (!initialized) {
        section('Initialization')
        await fs.open('.initialized','w')
        await cmd.checkVersion('npm','6.14.1')
        await cmd.checkVersion('node','v12.16.1')
        console.log('Installing build script dependencies.')
        await cmd.with_cwd('run', async () => {
            await cmd.run('npm',['install'])
        })
        console.log('Installing application dependencies')
        await cmd.with_cwd('app', async () => {
            await cmd.run('npm',['run','install'])
        })
    }
}



// =============
// === Clean ===
// =============

async function clean_js () {
    await cmd.with_cwd('app', async () => {
        await cmd.run('npm',['run','clean'].concat(child_argv))
    })
    try { await fs.unlink('.initialized') } catch {}
}



// =============
// === Build ===
// =============

async function build_js () {
    await cmd.with_cwd('app', async () => {
        await cmd.run('npm',['run','build'].concat(child_argv))
    })
}

async function build_rust () {
    console.log(`Building from sources.`)
    await cmd.run('wasm-pack',['build','--target','web','--no-typescript','--out-dir','../../target/web','lib/gui'].concat(child_argv))
    await patch_file('target/web/gui.js', js_workaround_patcher)
    await fs.rename('target/web/gui_bg.wasm','target/web/gui.wasm')

    /// We build to provisional location and patch files there before copying, so the backpack don't
    /// get errors from processing unpatched files. Also, here we copy into (overwriting), without
    /// removing old files. Backpack on Windows does not tolerate removing files it watches.
    await fs.mkdir('app/generated', {recursive:true})
    await copy('target/web','app/generated/wasm')
}

/// Workaround fix by wdanilo, see: https://github.com/rustwasm/wasm-pack/issues/790
function js_workaround_patcher(code) {
    code = code.replace(/if \(\(typeof URL.*}\);/gs,'return imports')
    code = code.replace(/if \(typeof module.*let result/gs,'let result')
    code = code.replace(/export default init;/gs,'export default init')
    code += '\nexport function after_load\(w,m\) { wasm = w; init.__wbindgen_wasm_module = m;}')
    return code
}



// =============
// === Watch ===
// =============

async function watch_rust () {
    let target = "run/build.py " + child_argv.join(" ")
    let args = ['watch','--watch','lib','-s',`${target}`]
    await cmd.run('cargo',args)
}

async function watch_js () {
    await cmd.with_cwd('app', async () => {
        await cmd.run('npm',['run','watch'].concat(child_argv))
    })
}



// ============
// === Dist ===
// ============

async function dist_js () {
    await cmd.with_cwd('app', async () => {
        await cmd.run('npm',['run','dist'].concat(child_argv))
    })
}



// ============
// === Main ===
// ============

async function main () {
    if (argv.clean) {
        section('Cleaning')
        if (argv.rust !== false) { }
        if (argv.js   !== false) { await clean_js() }
        return
    }

    await init()
    if (argv.watch == true) {
        section('Watching')
        let promises = []
        if (argv.rust !== false) { promises.push(watch_rust()) }
        if (argv.js   !== false) { promises.push(watch_js()) }
        await Promise.all(promises)
        return
    }

    section('Building')
    if (argv.rust !== false) { await build_rust() }
    if (argv.js   !== false) { await build_js() }

    if (argv.dist) {
        section('Packaging')
        await dist_js()
    }
}

main()
