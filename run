#!/usr/bin/env node

const cmd   = require('./build/lib/cmd')
const fs    = require('fs').promises
const fss   = require('fs')
const paths = require('./build/paths')

process.on('unhandledRejection', error => { throw(error) })

let args = process.argv.slice(2)



// ======================
// === Package Config ===
// ======================

function defaultConfig() {
    return {
        version: "2.0.0-alpha.0",
        author: {
            name: "Enso Team",
            email: "contact@luna-lang.org"
        },
        homepage: "https://github.com/luna/ide",
        repository: {
            type: "git",
            url: "git@github.com:luna/ide.git"
        },
        bugs: {
            url: "https://github.com/luna/ide/issues"
        },
    }
}

async function processPackageConfigs() {
    let files = []
    files = files.concat(glob.sync(paths.js.root + "/package.js", {cwd:paths.root}))
    files = files.concat(glob.sync(paths.js.root + "/lib/*/package.js", {cwd:paths.root}))
    for (file of files) {
        let dirPath = path.dirname(file)
        let outPath = path.join(dirPath,'package.json')
        let src     = await fs.readFile(file,'utf8')
        let modSrc  = `module = {}\n${src}\nreturn module.exports`
        let fn      = new Function('require','paths',modSrc)
        let mod     = fn(require,paths)
        let config  = mod.config
        if (!config) { throw(`Package config '${file}' do not export 'module.config'.`) }
        config = Object.assign(defaultConfig(),config)
        fs.writeFile(outPath,JSON.stringify(config,undefined,4))
    }
}



// ============
// === Main ===
// ============

let no_validation = '--no-validation'
async function init () {
    if(!args.includes(no_validation)) {
        await cmd.check_version('npm','6.13.4',{silent:true})
        await cmd.check_version('node','v12.16.1',{silent:true})
        await cmd.check_version('rustc','1.40.0-nightly',{
            preprocess:(v)=>v.substring(6,20),silent:true
        })
    }

    await processPackageConfigs()

    let initialized = fss.existsSync(paths.dist.init)
    if (!initialized) {
        cmd.section('Initialization')
        console.log('Installing build script dependencies.')
        await cmd.with_cwd('build', async () => {
            await cmd.run('npm',['install'])
        })

        if(args[0] == 'clean') {
            try { await fs.unlink(paths.dist.init) } catch {}
        } else {
            console.log('Installing application dependencies')
            await cmd.with_cwd(paths.js.root, async () => {
                await cmd.run('npm',['run','install'])
            })
            await fs.mkdir(paths.dist.root, {recursive:true})
            await fs.open(paths.dist.init,'w')
        }
    }
}

async function main() {
    await init()
    cmd.run('node',[paths.script.run].concat(args))
}

main()
