name: GUI CI
'on':
  - push
jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-latest
          - macOS-latest
          - ubuntu-latest
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: Upload Artifacts (macos, dmg)
        uses: actions/upload-artifact@v1
        with:
          name: bin/OUT_macos
          path: OUT_macos.txt
        if: matrix.os == 'macos-latest'
      - name: Upload Artifacts (windows, exe)
        uses: actions/upload-artifact@v1
        with:
          name: bin/OUT_windows
          path: OUT_windows.txt
        if: matrix.os == 'windows-latest'
      - name: Upload Artifacts (linux, AppImage)
        uses: actions/upload-artifact@v1
        with:
          name: bin/OUT_linux
          path: OUT_linux.txt
        if: matrix.os == 'ubuntu-latest'
  upload_to_github:
    name: GitHub Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macOS-latest
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Upload GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: artifacts/**/*
          body_path: CURRENT_RELEASE_CHANGELOG.md
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
  upload_to_cdn:
    name: CDN Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macOS-latest
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - shell: bash
        run: |2-

                  ref=${{ github.ref }}
                  refversion=${ref#"refs/tags/ide-"}
                  echo "DIST_VERSION=$refversion" >> $GITHUB_ENV
              
      - shell: bash
        run: |2-

                  aws configure --profile s3-upload <<-EOF > /dev/null 2>&1
                  ${{ secrets.ARTEFACT_S3_ACCESS_KEY_ID }}
                  ${{ secrets.ARTEFACT_S3_SECRET_ACCESS_KEY }}
                  us-west-1
                  text
                  EOF
              
      - name: Upload 'index.js.gz' to CDN
        shell: bash
        run: |2-

                      aws s3 cp ./artifacts/content/assets/index.js.gz
                      s3://ensocdn/ide/${{ env.DIST_VERSION }}/index.js.gz --profile
                      s3-upload --acl public-read --content-encoding gzip
                  
      - name: Upload 'style.css' to CDN
        shell: bash
        run: |2-

                      aws s3 cp ./artifacts/content/assets/style.css
                      s3://ensocdn/ide/${{ env.DIST_VERSION }}/style.css --profile
                      s3-upload --acl public-read --content-encoding gzip
                  
      - name: Upload 'style.css' to CDN
        shell: bash
        run: |2-

                      aws s3 cp ./artifacts/content/assets/style.css
                      s3://ensocdn/ide/${{ env.DIST_VERSION }}/style.css --profile
                      s3-upload --acl public-read --content-encoding gzip
                  
      - name: Upload 'ide.wasm' to CDN
        shell: bash
        run: |2-

                      aws s3 cp ./artifacts/content/assets/ide.wasm
                      s3://ensocdn/ide/${{ env.DIST_VERSION }}/ide.wasm --profile
                      s3-upload --acl public-read --content-encoding gzip
                  
      - name: Upload 'wasm_imports.js.gz' to CDN
        shell: bash
        run: |2-

                      aws s3 cp ./artifacts/content/assets/wasm_imports.js.gz
                      s3://ensocdn/ide/${{ env.DIST_VERSION }}/wasm_imports.js.gz --profile
                      s3-upload --acl public-read --content-encoding gzip
                  
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
