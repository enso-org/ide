//! Traits providing abstraction over transport used by the JSON-RPC client.

use crate::prelude::*;

use failure::Error;
use futures::channel::mpsc::UnboundedSender;

/// A transport that facilitate JSON-RPC protocol.
///
/// Must allow sending and receiving text messages. Additionally, connection at
/// any point might be lost for any reason.
///
/// Typical implementation would use WebSockets but it can be also a mock for
/// tests.
pub trait Transport : Debug {
    /// Send a text message.
    fn send_text(&mut self, message:String) -> Result<(), Error>;

    /// Set up a channel which shall be used to receive events from the `Transport`.
    fn set_event_transmitter(&mut self, transmitter:UnboundedSender<TransportEvent>);
}

/// An event generated by the `Transport`.
#[derive(Debug)]
pub enum TransportEvent {
    /// A text message with has been received.
    TextMessage(String),
    /// A socket has been opened.
    Opened,
    /// A socket has been closed by the peer.
    Closed,
}
